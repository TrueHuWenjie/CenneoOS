
# For which one architecture
TARGET_ARCH = x86
# TARGET_ARCH = AMD64
# TARGET_ARCH = ARM

# Current global directory of cenneo-os-project
current_dir = /Users/huwenjie/Documents/cenneo-os-project
image = $(current_dir)/image/image.vhd
tools = $(current_dir)/tools
appbase = $(tools)/appbase

# Detecting Platform and Architecture
ifeq ($(OS), Windows_NT)
    PLATFORM += WIN32
    ifeq ($(PROCESSOR_ARCHITEW6432), AMD64)
        ARCH += AMD64
    else
        ifeq ($(PROCESSOR_ARCHITECTURE), AMD64)
            ARCH += AMD64
        endif
        ifeq ($(PROCESSOR_ARCHITECTURE), x86)
            ARCH += IA32
        endif
    endif
else
    UNAME_S := $(shell uname -s)
    ifeq ($(UNAME_S), Linux)
        PLATFORM += LINUX
    endif
    ifeq ($(UNAME_S), Darwin)
        PLATFORM += OSX
    endif
    UNAME_P := $(shell uname -p)
    ifeq ($(UNAME_P), x86_64)
        ARCH += AMD64
    endif
    ifneq ($(filter %86, $(UNAME_P)),)
        ARCH += IA32
    endif
    ifneq ($(filter arm%, $(UNAME_P)),)
        ARCH += ARM
    endif
endif

# Toolchain
ifeq ($(PLATFORM), LINUX)

CC       = gcc
CXX      = g++
TOOLS_CC = gcc
NS       = nasm
LD       = ld
AR       = ar
OBJCOPY  = objcopy
SED      = sed
GFR      = gfr

endif

ifeq ($(PLATFORM), OSX)

CC       = x86_64-elf-gcc       # C Compiler
CXX      = x86_64-elf-g++       # C++ Compiler
TOOLS_CC = gcc                  # C Compiler for compiling tools
NS       = nasm                 # Assembler
LD       = x86_64-elf-ld        # Linker
AR       = x86_64-elf-ar        # 
OBJCOPY  = x86_64-elf-objcopy   # Objcopy
SED      = gsed                 # Sed Command
GFR      = $(tools)/gfr/gfr     # GhostBird File System Reader

endif

qemu = qemu-system-x86_64       # QEMU Emulator
compress = zip                  # Compress Command
depress = unzip                 # Depress Command

# MACRO for building kernel
#kernel_macro = \
 -D __DOXYGEN__=1